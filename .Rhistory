pch = 16,
col = 2)
fit2 = lm(y~x)
abline(a = fit2$coefficients[1], b = fit2$coefficients[2], col = 2)
x2 = x^2
fit3 = lm(y~x + x2)
data1 = data.frame(x = t, x2 = t^2)
lines(t, predict(fit3,data1), col = "red")
set.seed(2021)
x = seq(0, 0.9, by=0.1)
noise = rnorm(length(x), mean = 0, sd = 1)
y <- cos(2*pi*x)+noise
t=seq(0,1,0.01)
ty=sin(2*pi*t)
plot(t,ty,type="l", xlab="time", ylab="Sine wave", ylim = c(-3,3))
points(x = x,
y = y,
pch = 16,
col = 2)
#plot(x, y, type='l', col='darkblue')
fit1 = mean(y)
abline(a = fit1, b = 0, col = 2)
plot(t,ty,type="l", xlab="time", ylab="Sine wave", ylim = c(-3,3))
points(x = x,
y = y,
pch = 16,
col = 2)
fit2 = lm(y~x)
abline(a = fit2$coefficients[1], b = fit2$coefficients[2], col = 2)
x2 = x^2
fit3 = lm(y~x + x2)
data1 = data.frame(x = t, x2 = t^2)
plot(t,ty,type="l", xlab="time", ylab="Sine wave", ylim = c(-3,3))
points(x = x,
y = y,
pch = 16,
col = 2)
lines(t, predict(fit3,data1), col = "red")
rm(list=ls())
set.seed(2021)
x = seq(0, 0.9, by=0.1)
noise = rnorm(length(x), mean = 0, sd = 1)
y <- cos(2*pi*x)+noise
t=seq(0,1,0.01)
ty=sin(2*pi*t)
plot(t,ty,type="l", xlab="time", ylab="Sine wave", ylim = c(-3,3))
points(x = x,
y = y,
pch = 16,
col = 2)
#plot(x, y, type='l', col='darkblue')
fit1 = mean(y)
abline(a = fit1, b = 0, col = 2)
plot(t,ty,type="l", xlab="time", ylab="Sine wave", ylim = c(-3,3))
points(x = x,
y = y,
pch = 16,
col = 2)
fit2 = lm(y~x)
abline(a = fit2$coefficients[1], b = fit2$coefficients[2], col = 2)
x2 = x^2
fit3 = lm(y~x + x2)
data1 = data.frame(x = t, x2 = t^2)
plot(t,ty,type="l", xlab="time", ylab="Sine wave", ylim = c(-3,3))
points(x = x,
y = y,
pch = 16,
col = 2)
lines(t, predict(fit3,data1), col = "red")
x2 = x^2
x3 = x^3
x4 = x^4
x5 = x^5
x6 = x^6
x7 = x^7
x8 = x^8
x9 = x^9
fit4 = lm(y~x + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9)
data2 = data.frame(x = t, x2 = t^2, x3 = t^3, x4 = t^4, x5 = t^5, x6 = t^6,
x7 = t^7, x8 = t^8, x9 = t^9)
plot(t,ty,type="l", xlab="time", ylab="Sine wave", ylim = c(-3,3))
points(x = x,
y = y,
pch = 16,
col = 2)
lines(t, predict(fit4,data2), col = "red")
set.seed(2021)
set.seed(2021)
set.seed(2021)
set.seed(2021)
par(mfrow = c(2,2))
x = seq(0, 0.9, by=0.1)
noise = rnorm(length(x), mean = 0, sd = 1)
y <- cos(2*pi*x)+noise
t=seq(0,1,0.01)
ty=sin(2*pi*t)
plot(t,ty,type="l", xlab="time", ylab="Sine wave", ylim = c(-3,3))
points(x = x,
y = y,
pch = 16,
col = 2)
#plot(x, y, type='l', col='darkblue')
fit1 = mean(y)
abline(a = fit1, b = 0, col = 2)
plot(t,ty,type="l", xlab="time", ylab="Sine wave", ylim = c(-3,3))
points(x = x,
y = y,
pch = 16,
col = 2)
fit2 = lm(y~x)
abline(a = fit2$coefficients[1], b = fit2$coefficients[2], col = 2)
x2 = x^2
fit3 = lm(y~x + x2)
data1 = data.frame(x = t, x2 = t^2)
plot(t,ty,type="l", xlab="time", ylab="Sine wave", ylim = c(-3,3))
points(x = x,
y = y,
pch = 16,
col = 2)
lines(t, predict(fit3,data1), col = "red")
x2 = x^2
x3 = x^3
x4 = x^4
x5 = x^5
x6 = x^6
x7 = x^7
x8 = x^8
x9 = x^9
fit4 = lm(y~x + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9)
data2 = data.frame(x = t, x2 = t^2, x3 = t^3, x4 = t^4, x5 = t^5, x6 = t^6,
x7 = t^7, x8 = t^8, x9 = t^9)
plot(t,ty,type="l", xlab="time", ylab="Sine wave", ylim = c(-3,3))
points(x = x,
y = y,
pch = 16,
col = 2)
lines(t, predict(fit4,data2), col = "red")
set.seed(2021)
par(mfrow = c(2,2))
x = seq(0, 0.9, by=0.1)
noise = rnorm(length(x), mean = 0, sd = 1)
y <- cos(2*pi*x)+noise
t=seq(0,1,0.01)
ty=sin(2*pi*t)
plot(t,ty,type="l", xlab="time", ylab="Sine wave", ylim = c(-3,3), main="M=0")
points(x = x,
y = y,
pch = 16,
col = 2)
#plot(x, y, type='l', col='darkblue')
fit1 = mean(y)
abline(a = fit1, b = 0, col = 2)
plot(t,ty,type="l", xlab="time", ylab="Sine wave", ylim = c(-3,3), main="M=1")
points(x = x,
y = y,
pch = 16,
col = 2)
fit2 = lm(y~x)
abline(a = fit2$coefficients[1], b = fit2$coefficients[2], col = 2)
x2 = x^2
fit3 = lm(y~x + x2)
data1 = data.frame(x = t, x2 = t^2)
plot(t,ty,type="l", xlab="time", ylab="Sine wave", ylim = c(-3,3), main="M=2")
points(x = x,
y = y,
pch = 16,
col = 2)
lines(t, predict(fit3,data1), col = "red")
x2 = x^2
x3 = x^3
x4 = x^4
x5 = x^5
x6 = x^6
x7 = x^7
x8 = x^8
x9 = x^9
fit4 = lm(y~x + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9)
data2 = data.frame(x = t, x2 = t^2, x3 = t^3, x4 = t^4, x5 = t^5, x6 = t^6,
x7 = t^7, x8 = t^8, x9 = t^9)
plot(t,ty,type="l", xlab="time", ylab="Sine wave", ylim = c(-3,3), main="M=9")
points(x = x,
y = y,
pch = 16,
col = 2)
lines(t, predict(fit4,data2), col = "red")
set.seed(2021)
par(mfrow = c(2,2), title = 'Over-fitting issue')
x = seq(0, 0.9, by=0.1)
noise = rnorm(length(x), mean = 0, sd = 1)
y <- cos(2*pi*x)+noise
t=seq(0,1,0.01)
ty=sin(2*pi*t)
plot(t,ty,type="l", xlab="time", ylab="Sine wave", ylim = c(-3,3), main="M=0")
points(x = x,
y = y,
pch = 16,
col = 2)
#plot(x, y, type='l', col='darkblue')
fit1 = mean(y)
abline(a = fit1, b = 0, col = 2)
plot(t,ty,type="l", xlab="time", ylab="Sine wave", ylim = c(-3,3), main="M=1")
points(x = x,
y = y,
pch = 16,
col = 2)
fit2 = lm(y~x)
abline(a = fit2$coefficients[1], b = fit2$coefficients[2], col = 2)
x2 = x^2
fit3 = lm(y~x + x2)
data1 = data.frame(x = t, x2 = t^2)
plot(t,ty,type="l", xlab="time", ylab="Sine wave", ylim = c(-3,3), main="M=2")
points(x = x,
y = y,
pch = 16,
col = 2)
lines(t, predict(fit3,data1), col = "red")
x2 = x^2
x3 = x^3
x4 = x^4
x5 = x^5
x6 = x^6
x7 = x^7
x8 = x^8
x9 = x^9
fit4 = lm(y~x + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9)
data2 = data.frame(x = t, x2 = t^2, x3 = t^3, x4 = t^4, x5 = t^5, x6 = t^6,
x7 = t^7, x8 = t^8, x9 = t^9)
plot(t,ty,type="l", xlab="time", ylab="Sine wave", ylim = c(-3,3), main="M=9")
points(x = x,
y = y,
pch = 16,
col = 2)
lines(t, predict(fit4,data2), col = "red")
set.seed(2021)
par(mfrow = c(2,2), main = 'Over-fitting issue')
x = seq(0, 0.9, by=0.1)
noise = rnorm(length(x), mean = 0, sd = 1)
y <- cos(2*pi*x)+noise
t=seq(0,1,0.01)
ty=sin(2*pi*t)
plot(t,ty,type="l", xlab="time", ylab="Sine wave", ylim = c(-3,3), main="M=0")
points(x = x,
y = y,
pch = 16,
col = 2)
#plot(x, y, type='l', col='darkblue')
fit1 = mean(y)
abline(a = fit1, b = 0, col = 2)
plot(t,ty,type="l", xlab="time", ylab="Sine wave", ylim = c(-3,3), main="M=1")
points(x = x,
y = y,
pch = 16,
col = 2)
fit2 = lm(y~x)
abline(a = fit2$coefficients[1], b = fit2$coefficients[2], col = 2)
x2 = x^2
fit3 = lm(y~x + x2)
data1 = data.frame(x = t, x2 = t^2)
plot(t,ty,type="l", xlab="time", ylab="Sine wave", ylim = c(-3,3), main="M=2")
points(x = x,
y = y,
pch = 16,
col = 2)
lines(t, predict(fit3,data1), col = "red")
x2 = x^2
x3 = x^3
x4 = x^4
x5 = x^5
x6 = x^6
x7 = x^7
x8 = x^8
x9 = x^9
fit4 = lm(y~x + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9)
data2 = data.frame(x = t, x2 = t^2, x3 = t^3, x4 = t^4, x5 = t^5, x6 = t^6,
x7 = t^7, x8 = t^8, x9 = t^9)
plot(t,ty,type="l", xlab="time", ylab="Sine wave", ylim = c(-3,3), main="M=9")
points(x = x,
y = y,
pch = 16,
col = 2)
lines(t, predict(fit4,data2), col = "red")
set.seed(2021)
par(mfrow = c(2,2))
x = seq(0, 0.9, by=0.1)
noise = rnorm(length(x), mean = 0, sd = 1)
y <- sin(2*pi*x)+noise
y_noiseless <- sin(2*pi*x)
t=seq(0,1,0.01)
ty=sin(2*pi*t)
plot(t,ty,type="l", xlab="time", ylab="Sine wave", ylim = c(-3,3), main="M=0")
points(x = x,
y = y,
pch = 16,
col = 2)
#plot(x, y, type='l', col='darkblue')
fit1 = mean(y)
abline(a = fit1, b = 0, col = 2)
plot(t,ty,type="l", xlab="time", ylab="Sine wave", ylim = c(-3,3), main="M=1")
points(x = x,
y = y,
pch = 16,
col = 2)
fit2 = lm(y~x)
abline(a = fit2$coefficients[1], b = fit2$coefficients[2], col = 2)
x2 = x^2
fit3 = lm(y~x + x2)
data1 = data.frame(x = t, x2 = t^2)
plot(t,ty,type="l", xlab="time", ylab="Sine wave", ylim = c(-3,3), main="M=2")
points(x = x,
y = y,
pch = 16,
col = 2)
lines(t, predict(fit3,data1), col = "red")
x2 = x^2
x3 = x^3
x4 = x^4
x5 = x^5
x6 = x^6
x7 = x^7
x8 = x^8
x9 = x^9
fit4 = lm(y~x + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9)
data2 = data.frame(x = t, x2 = t^2, x3 = t^3, x4 = t^4, x5 = t^5, x6 = t^6,
x7 = t^7, x8 = t^8, x9 = t^9)
plot(t,ty,type="l", xlab="time", ylab="Sine wave", ylim = c(-3,3), main="M=9")
points(x = x,
y = y,
pch = 16,
col = 2)
lines(t, predict(fit4,data2), col = "red")
plot(t,ty,type="l", xlab="time", ylab="Sine wave", ylim = c(-3,3), main="M=0")
points(x = x,
y = y_noiseless,
pch = 16,
col = 2)
#plot(x, y, type='l', col='darkblue')
fit1 = mean(y_noiseless)
abline(a = fit1, b = 0, col = 2)
plot(t,ty,type="l", xlab="time", ylab="Sine wave", ylim = c(-3,3), main="M=1")
points(x = x,
y = y_noiseless,
pch = 16,
col = 2)
fit2 = lm(y_noiseless~x)
abline(a = fit2$coefficients[1], b = fit2$coefficients[2], col = 2)
x2 = x^2
fit3 = lm(y_noiseless~x + x2)
data1 = data.frame(x = t, x2 = t^2)
plot(t,ty,type="l", xlab="time", ylab="Sine wave", ylim = c(-3,3), main="M=2")
points(x = x,
y = y_noiseless,
pch = 16,
col = 2)
lines(t, predict(fit3,data1), col = "red")
x2 = x^2
x3 = x^3
x4 = x^4
x5 = x^5
x6 = x^6
x7 = x^7
x8 = x^8
x9 = x^9
fit4 = lm(y_noiseless~x + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9)
data2 = data.frame(x = t, x2 = t^2, x3 = t^3, x4 = t^4, x5 = t^5, x6 = t^6,
x7 = t^7, x8 = t^8, x9 = t^9)
plot(t,ty,type="l", xlab="time", ylab="Sine wave", ylim = c(-3,3), main="M=9")
points(x = x,
y = y_noiseless,
pch = 16,
col = 2)
lines(t, predict(fit4,data2), col = "red")
rm(list=ls())
setwd("~/GitHub/CVEngineer_Bootcamp")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
senti <- read.csv("~/GitHub/CVEngineer_Bootcamp/sentiment_sentence.csv")
char <- read.csv("~/GitHub/CVEngineer_Bootcamp/character_sentence.csv")
ends <- read.csv("~/GitHub/CVEngineer_Bootcamp/chapter_ends.csv")
View(ends)
senti[,1]
senti[,2]
senti[,1]
senti_invest = senti[2,-1]
library(matlib)
contribution = matrix(0L, nrow = dim(char[,-1])[1], ncol = dim(char[,-1])[2])
for (i in 1:dim(char)[1]){
char_app = which(char[i,-1] == 1)
contribution[i, char_app] = sapply(char_app, kernel)
}
x = seq(-10, 10, by = 1)
y = 10*dnorm(x, mean = 0, sd = 1)
kernel <- function(id, one_d_data = senti_invest, weight = y, window = 21){
smooth = 0
if (id >= (window-1)/2 & id <= (dim(one_d_data)[2] - (window-1)/2)){
smooth = sum(weight * one_d_data[1,(id-(window-1)/2):(id+(window-1)/2)])
} else if (id < (window-1)/2) {
smooth = sum(weight[((window+1)/2-id):window] * one_d_data[1,1:(id+(window-1)/2)])
} else {
length  = (window+1)/2 + dim(one_d_data)[2]-id
smooth = sum(weight[1:length] * one_d_data[1,id-((window-1)/2):id-((window-1)/2)+length-1])
}
return(smooth)
}
library(matlib)
contribution = matrix(0L, nrow = dim(char[,-1])[1], ncol = dim(char[,-1])[2])
for (i in 1:dim(char)[1]){
char_app = which(char[i,-1] == 1)
contribution[i, char_app] = sapply(char_app, kernel)
}
# contribution 14*5584
# ridge regression
lambdas = 10^seq(2,-3, by= -0.1)
cost = 0
for (lambda in lambdas){
y = t(data.matrix(senti_invest))
y_hat = t(contribution) %*% inv(contribution %*% t(contribution) + lambda * diag(dim(contribution)[1])) %*% contribution %*% y
cost = c(cost ,norm(y-y_hat, type= "2"))
}
cost = cost[-1]
lambda_choose = lambdas[which.min(cost)]
beta = inv(contribution %*% t(contribution) + lambda_choose * diag(dim(contribution)[1])) %*% contribution %*% y
beta = beta/norm(beta, type='2')
plot(beta)
char[,1]
View(ends)
rang_invest = ends[1:3,2]
rang_invest = ends[(1):(3)+1,2]
rang_invest = ends[(1):(3)+1,2]
rang_invest = ends[(1):(3+1),2]
rang_invest = ends[(2):(4+1),2]
rang_invest = ends[(2):(10+1),2]
rang_invest = ends[c((2),(10+1)),2]
range_invest[1]
rang\_invest[1]
rang_invest[1]
range_invest = ends[c((2),(10+1)),2]
x = seq(-10, 10, by = 1)
y = 10*dnorm(x, mean = 0, sd = 1)
kernel <- function(id, one_d_data = senti_invest, weight = y, window = 21){
smooth = 0
if (id >= (window-1)/2 & id <= (dim(one_d_data)[2] - (window-1)/2)){
smooth = sum(weight * one_d_data[1,(id-(window-1)/2):(id+(window-1)/2)])
} else if (id < (window-1)/2) {
smooth = sum(weight[((window+1)/2-id):window] * one_d_data[1,1:(id+(window-1)/2)])
} else {
length  = (window+1)/2 + dim(one_d_data)[2]-id
smooth = sum(weight[1:length] * one_d_data[1,id-((window-1)/2):id-((window-1)/2)+length-1])
}
return(smooth)
}
library(matlib)
contribution = matrix(0L, nrow = dim(char[,-1])[1], ncol = dim(char[,-1])[2])
for (i in 1:dim(char)[1]){
char_app = which(char[i,-1] == 1)
contribution[i, char_app] = sapply(char_app, kernel)
}
# ridge regression
lambdas = 10^seq(2,-3, by= -0.1)
cost = 0
y = t(data.matrix(senti_invest))
y = t(data.matrix(senti_invest))[rang_invest[1]:range_invest[2]]
X = contribution[,rang_invest[1]:range_invest[2]]
for (lambda in lambdas){
y_hat = t(X) %*% inv(X) %*% t(X) + lambda * diag(dim(X)[1]) %*% X %*% y
cost = c(cost ,norm(y-y_hat, type= "2"))
}
for (lambda in lambdas){
y_hat = t(X) %*% inv(X %*% t(X) + lambda * diag(dim(X)[1])) %*% X %*% y
cost = c(cost ,norm(y-y_hat, type= "2"))
}
cost = cost[-1]
lambda_choose = lambdas[which.min(cost)]
beta = inv(X %*% t(X) + lambda_choose * diag(dim(X)[1])) %*% X %*% y
beta = beta/norm(beta, type='2')
plot(beta)
range_invest = ends[c((1),(61+1)),2] # FROM where to where
lambdas = 10^seq(2,-3, by= -0.1)
cost = 0
y = t(data.matrix(senti_invest))[rang_invest[1]:range_invest[2]]
X = contribution[,rang_invest[1]:range_invest[2]]
for (lambda in lambdas){
y_hat = t(X) %*% inv(X %*% t(X) + lambda * diag(dim(X)[1])) %*% X %*% y
cost = c(cost ,norm(y-y_hat, type= "2"))
}
cost = cost[-1]
lambda_choose = lambdas[which.min(cost)]
beta = inv(X %*% t(X) + lambda_choose * diag(dim(X)[1])) %*% X %*% y
beta = beta/norm(beta, type='2')
plot(beta)
char[,1]
plot(beta)
text(beta, char[,1], cex=0.6, pos=4, col="red")
plot(beta,1:14)
plot(1:14, beta)
plot(1:14, beta)
text(b:14, beta, char[,1], cex=0.6, pos=4, col="red")
plot(1:14, beta)
text(1:14, beta, char[,1], cex=0.6, pos=4, col="red")
plot(1:14, beta, xlim = c(0,15))
plot(1:14, beta, xlim = c(0,15))
text(1:14, beta, char[,1], cex=0.6, pos=4, col="red")
plot(1:14, beta, xlim = c(0,15))
text(1:14, beta, char[,1], cex=0.6, pos=4, col="blue")
plot(1:14, beta, xlim = c(0,15))
text(1:14, beta, char[,1], cex=0.6, pos=3, col="blue")
plot(1:14, beta, xlim = c(0,15))
text(1:14, beta, char[,1], cex=0.6, pos=2, col="blue")
plot(1:14, beta, xlim = c(0,14))
text(1:14, beta, char[,1], cex=0.6, pos=2, col="blue")
plot(1:14, beta, xlim = c(0,14), main = 'overall negative sentiment contribution')
text(1:14, beta, char[,1], cex=0.6, pos=2, col="blue")
rm(list=ls())
